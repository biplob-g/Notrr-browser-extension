import { useState, useEffect } from "react";
import { Note } from "@/types/note";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Wand2, Link, SaveIcon, Tag, X } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import RichTextEditor from "./RichTextEditor";

interface NoteEditorProps {
  note: Note;
  onUpdateNote: (note: Note) => void;
}

const NoteEditor = ({ note, onUpdateNote }: NoteEditorProps) => {
  const [title, setTitle] = useState(note.title);
  const [content, setContent] = useState(note.content);
  const [tags, setTags] = useState<string[]>(note.tags);
  const [newTag, setNewTag] = useState("");
  const [url, setUrl] = useState(note.url);
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  // Update state when the active note changes
  useEffect(() => {
    setTitle(note.title);
    setContent(note.content);
    setTags(note.tags);
    setUrl(note.url);
  }, [note.id, note.title, note.content, note.tags, note.url]);

  // Save changes
  const saveChanges = () => {
    onUpdateNote({
      ...note,
      title,
      content,
      tags,
      url
    });
    
    toast({
      title: "Changes saved",
      description: "Your note has been updated"
    });
  };

  const analyzeCurrentPage = async () => {
    setIsGenerating(true);
    try {
      // For now, we'll simulate this with a mock response
      setTimeout(() => {
        const mockTitle = "Notes on " + document.title;
        const mockContent = `<h2>Page Summary</h2><p>This is an AI-generated summary of the current webpage. In a real implementation, this would be generated by the Gemini API based on the actual page content.</p><ul><li>Key point 1 from the page</li><li>Key point 2 from the page</li><li>Key point 3 from the page</li></ul>`;
        
        setTitle(mockTitle);
        setContent(mockContent);
        
        toast({
          title: "Page analyzed",
          description: "AI-generated notes created from the current page"
        });
      }, 1500);
    } catch (error) {
      console.error("Error analyzing page:", error);
      toast({
        title: "Analysis failed",
        description: "Unable to analyze the current page",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const addTag = () => {
    if (newTag.trim() && !tags.includes(newTag.trim())) {
      setTags([...tags, newTag.trim()]);
      setNewTag("");
    }
  };

  const removeTag = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      e.preventDefault();
      addTag();
    }
  };

  return (
    <div className="flex flex-col h-full overflow-hidden">
      {/* Editor Toolbar */}
      <div className="flex flex-wrap justify-between items-center border-b border-border p-2 sm:p-4 bg-card gap-2">
        <Button
          onClick={analyzeCurrentPage}
          variant="outline"
          size="sm"
          className="flex items-center gap-1 text-xs sm:text-sm"
          disabled={isGenerating}
        >
          <Wand2 className="h-3 w-3 sm:h-4 sm:w-4" />
          {isGenerating ? "Generating..." : "Generate with Gemini"}
        </Button>
        
        <Button
          onClick={saveChanges}
          variant="secondary"
          size="sm"
          className="flex items-center gap-1 text-xs sm:text-sm"
        >
          <SaveIcon className="h-3 w-3 sm:h-4 sm:w-4" />
          Save
        </Button>
      </div>
      
      {/* Title Input */}
      <div className="p-2 sm:p-4">
        <Input
          className="border-none text-lg sm:text-2xl font-semibold px-0 focus-visible:ring-0 bg-transparent"
          placeholder="Note title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
      </div>

      {/* URL Display */}
      {url && (
        <div className="px-2 sm:px-4 pb-1 flex items-center gap-1 text-xs text-muted-foreground overflow-hidden">
          <Link className="h-3 w-3 flex-shrink-0" />
          <a 
            href={url} 
            target="_blank" 
            rel="noopener noreferrer"
            className="truncate hover:text-primary hover:underline"
            title={url}
          >
            {url}
          </a>
        </div>
      )}
      
      {/* Tags */}
      <div className="px-2 sm:px-4 pb-1 sm:pb-2 flex flex-wrap gap-1 sm:gap-2 items-center">
        {tags.map((tag) => (
          <div 
            key={tag} 
            className="bg-secondary text-secondary-foreground px-1.5 sm:px-2 py-0.5 sm:py-1 rounded-md flex items-center gap-1 text-xs"
          >
            {tag}
            <button onClick={() => removeTag(tag)} className="hover:text-destructive">
              <X className="h-2.5 w-2.5 sm:h-3 sm:w-3" />
            </button>
          </div>
        ))}
        <div className="flex items-center gap-1">
          <Tag className="h-2.5 w-2.5 sm:h-3 sm:w-3 text-muted-foreground" />
          <input
            type="text"
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="Add tag..."
            className="border-none p-0 text-xs focus:outline-none bg-transparent w-16 sm:w-20"
          />
        </div>
      </div>
      
      {/* Rich Text Editor */}
      <div className="flex-1 overflow-y-auto p-2 sm:p-4">
        <RichTextEditor 
          content={content}
          setContent={setContent}
        />
      </div>
    </div>
  );
};

export default NoteEditor;
